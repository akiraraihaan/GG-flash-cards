{
  "flashcards": [
    {
      "id": 1,
      "question": "What is the difference between var, let, and const?",
      "answer": "In JavaScript, var is function-scoped and can be re-declared; let and const are block-scoped, with let allowing re-assignment and const preventing it. However, const objects can have their contents modified."
    },
    {
      "id": 2,
      "question": "What are closures in JavaScript?",
      "answer": "A closure is a function that has access to its own scope, the scope of the outer function, and the global scope. It remembers the environment in which it was created."
    },
    {
      "id": 3,
      "question": "Explain the concept of hoisting in JavaScript.",
      "answer": "Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope. Variables declared with var are hoisted and initialized with undefined, while let and const are hoisted but not initialized (temporal dead zone)."
    },
    {
      "id": 4,
      "question": "What is the event loop in JavaScript?",
      "answer": "The event loop is a mechanism that allows JavaScript to perform non-blocking operations despite being single-threaded. It monitors the call stack and the callback queue, pushing callbacks from the queue to the stack when it's empty."
    },
    {
      "id": 5,
      "question": "What is the difference between == and === operators?",
      "answer": "== is the equality operator that compares values after type conversion, while === is the strict equality operator that compares both values and types without conversion."
    },
    {
      "id": 6,
      "question": "Explain promises in JavaScript.",
      "answer": "Promises are objects representing the eventual completion or failure of an asynchronous operation. They can be in one of three states: pending, fulfilled, or rejected, and support chaining with .then() and .catch()."
    },
    {
      "id": 7,
      "question": "What is the purpose of the 'this' keyword?",
      "answer": "The 'this' keyword refers to the object it belongs to. Its value depends on how a function is called: in a method, 'this' refers to the owner object; alone, it refers to the global object; in a function, it refers to the global object; in strict mode, it's undefined."
    },
    {
      "id": 8,
      "question": "What are arrow functions, and how do they differ from regular functions?",
      "answer": "Arrow functions are a concise syntax introduced in ES6. They don't have their own 'this' or 'arguments' binding, can't be used as constructors, and don't have a prototype. They inherit 'this' from the enclosing scope."
    },
    {
      "id": 9,
      "question": "What is the difference between null and undefined?",
      "answer": "undefined means a variable has been declared but not assigned a value, while null is an assignment value representing no value or no object. undefined is a type, while null is an object."
    },
    {
      "id": 10,
      "question": "What are JavaScript prototypes?",
      "answer": "Prototypes are the mechanism by which JavaScript objects inherit features from one another. Every JavaScript object has a prototype property that points to another object, creating a prototype chain used for property lookup."
    },
    {
      "id": 11,
      "question": "What is the DOM?",
      "answer": "The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the page so programs can change the document structure, style, and content dynamically."
    },
    {
      "id": 12,
      "question": "Explain async/await in JavaScript.",
      "answer": "async/await is syntactic sugar built on top of Promises, making asynchronous code look and behave more like synchronous code. An async function returns a Promise, and the await keyword pauses execution until a Promise is resolved."
    },
    {
      "id": 13,
      "question": "What is event bubbling and event capturing?",
      "answer": "Event bubbling is when an event triggers on the deepest target element, then bubbles up to ancestor elements. Event capturing is the oppositeâ€”events are captured at the root and propagate to the target. Both are phases of event propagation."
    },
    {
      "id": 14,
      "question": "What is the purpose of the 'use strict' directive?",
      "answer": "'use strict' enables JavaScript's strict mode, which enforces stricter parsing and error handling. It helps catch common coding errors, prevents certain unsafe actions, and disables features that are confusing or poorly thought out."
    },
    {
      "id": 15,
      "question": "What is a callback function?",
      "answer": "A callback function is a function passed as an argument to another function, which is then invoked inside the outer function. Callbacks allow asynchronous operations and are commonly used in event handlers and data fetching."
    },
    {
      "id": 16,
      "question": "What is destructuring in JavaScript?",
      "answer": "Destructuring is an ES6 feature that allows unpacking values from arrays or properties from objects into distinct variables. It provides a concise way to extract data from these data structures."
    },
    {
      "id": 17,
      "question": "What are template literals?",
      "answer": "Template literals are string literals that allow embedded expressions and multi-line strings. They are enclosed by backticks (`) instead of quotes and can contain placeholders indicated by ${expression}."
    },
    {
      "id": 18,
      "question": "What is the spread operator?",
      "answer": "The spread operator (...) allows an iterable such as an array or string to be expanded in places where zero or more arguments or elements are expected, or an object expression to be expanded in places where key-value pairs are expected."
    },
    {
      "id": 19,
      "question": "Explain REST parameters in JavaScript.",
      "answer": "REST parameters (indicated by ...) allow a function to accept an indefinite number of arguments as an array. This provides a cleaner alternative to using the arguments object."
    },
    {
      "id": 20,
      "question": "What is the difference between map and forEach methods?",
      "answer": "forEach iterates over array elements and executes a callback for each element without returning anything. map creates a new array with the results of calling a function for every array element, leaving the original array unchanged."
    }
  ]
}